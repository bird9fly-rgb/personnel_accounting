# apps/personnel/management/commands/import_personnel.py
"""
Management command –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python manage.py import_personnel path/to/file.csv
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from apps.personnel.models import Serviceman, Rank
from apps.staffing.models import Position
import csv
from datetime import datetime


class Command(BaseCommand):
    help = '–Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É'

    def add_arguments(self, parser):
        parser.add_argument(
            'csv_file',
            type=str,
            help='–®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏'
        )
        parser.add_argument(
            '--update',
            action='store_true',
            help='–û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫—É'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö'
        )

    def handle(self, *args, **options):
        csv_file = options['csv_file']
        update_existing = options.get('update', False)
        dry_run = options.get('dry_run', False)

        if dry_run:
            self.stdout.write(self.style.WARNING('üîç –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú - –¥–∞–Ω—ñ –Ω–µ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ'))

        try:
            with open(csv_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)

                created_count = 0
                updated_count = 0
                skipped_count = 0
                error_count = 0

                with transaction.atomic():
                    for row_num, row in enumerate(reader, start=2):  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 2 (1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                        try:
                            # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
                            result = self.process_row(row, update_existing)

                            if result == 'created':
                                created_count += 1
                                self.stdout.write(
                                    f'‚úÖ –†—è–¥–æ–∫ {row_num}: –°—Ç–≤–æ—Ä–µ–Ω–æ {row.get("–ü—Ä—ñ–∑–≤–∏—â–µ")} {row.get("–Ü–º\'—è")}')
                            elif result == 'updated':
                                updated_count += 1
                                self.stdout.write(
                                    f'üîÑ –†—è–¥–æ–∫ {row_num}: –û–Ω–æ–≤–ª–µ–Ω–æ {row.get("–ü—Ä—ñ–∑–≤–∏—â–µ")} {row.get("–Ü–º\'—è")}')
                            elif result == 'skipped':
                                skipped_count += 1
                                self.stdout.write(f'‚è≠Ô∏è –†—è–¥–æ–∫ {row_num}: –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ —ñ—Å–Ω—É—î)')

                        except Exception as e:
                            error_count += 1
                            self.stdout.write(
                                self.style.ERROR(f'‚ùå –†—è–¥–æ–∫ {row_num}: –ü–æ–º–∏–ª–∫–∞ - {str(e)}')
                            )

                    if dry_run:
                        transaction.set_rollback(True)
                        self.stdout.write(self.style.WARNING('\nüîô –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)'))

                # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stdout.write('\n' + '=' * 50)
                self.stdout.write('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –Ü–ú–ü–û–†–¢–£:')
                self.stdout.write('=' * 50)
                self.stdout.write(self.style.SUCCESS(f'‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_count}'))
                self.stdout.write(self.style.WARNING(f'üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}'))
                self.stdout.write(f'‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}')
                self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–æ–∫: {error_count}'))
                self.stdout.write('=' * 50)

                if not dry_run and (created_count > 0 or updated_count > 0):
                    self.stdout.write(self.style.SUCCESS('‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'))

        except FileNotFoundError:
            raise CommandError(f'–§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        except Exception as e:
            raise CommandError(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {str(e)}')

    def process_row(self, row, update_existing):
        """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑ CSV"""
        # –û—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –∑ –∫–ª—é—á—ñ–≤ —Ç–∞ –∑–Ω–∞—á–µ–Ω—å
        row = {k.strip(): v.strip() for k, v in row.items()}

        # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        required_fields = ['–ü—Ä—ñ–∑–≤–∏—â–µ', "–Ü–º'—è", '–†–ù–û–ö–ü–ü', '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '–ó–≤–∞–Ω–Ω—è']
        for field in required_fields:
            if not row.get(field):
                raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")

        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        try:
            date_of_birth = datetime.strptime(row['–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è'], '%d.%m.%Y').date()
        except ValueError:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {row['–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è']}")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–≤–∞–Ω–Ω—è
        try:
            rank = Rank.objects.get(name=row['–ó–≤–∞–Ω–Ω—è'])
        except Rank.DoesNotExist:
            raise ValueError(f"–ó–≤–∞–Ω–Ω—è '{row['–ó–≤–∞–Ω–Ω—è']}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Å–∞–¥—É —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞
        position = None
        if row.get('–Ü–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∏'):
            try:
                position = Position.objects.get(position_index=row['–Ü–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∏'])
            except Position.DoesNotExist:
                self.stdout.write(
                    self.style.WARNING(f"–ü–æ—Å–∞–¥–∞ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º '{row['–Ü–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∏']}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤–µ—Ü—å
        serviceman = None
        if row.get('–†–ù–û–ö–ü–ü'):
            serviceman = Serviceman.objects.filter(tax_id_number=row['–†–ù–û–ö–ü–ü']).first()

        if serviceman:
            if update_existing:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
                serviceman.last_name = row['–ü—Ä—ñ–∑–≤–∏—â–µ']
                serviceman.first_name = row["–Ü–º'—è"]
                serviceman.middle_name = row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ', '')
                serviceman.date_of_birth = date_of_birth
                serviceman.place_of_birth = row.get('–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '')
                serviceman.passport_number = row.get('–ü–∞—Å–ø–æ—Ä—Ç', '')
                serviceman.rank = rank
                if position:
                    serviceman.position = position
                serviceman.save()
                return 'updated'
            else:
                return 'skipped'
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            Serviceman.objects.create(
                last_name=row['–ü—Ä—ñ–∑–≤–∏—â–µ'],
                first_name=row["–Ü–º'—è"],
                middle_name=row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ', ''),
                date_of_birth=date_of_birth,
                place_of_birth=row.get('–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', ''),
                tax_id_number=row.get('–†–ù–û–ö–ü–ü'),
                passport_number=row.get('–ü–∞—Å–ø–æ—Ä—Ç', ''),
                rank=rank,
                position=position
            )
            return 'created'


# –ü—Ä–∏–∫–ª–∞–¥ CSV —Ñ–∞–π–ª—É:
"""
–ü—Ä—ñ–∑–≤–∏—â–µ,–Ü–º'—è,–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ,–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è,–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è,–†–ù–û–ö–ü–ü,–ü–∞—Å–ø–æ—Ä—Ç,–ó–≤–∞–Ω–Ω—è,–Ü–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∏
–®–µ–≤—á–µ–Ω–∫–æ,–û–ª–µ–∫—Å–∞–Ω–¥—Ä,–Ü–≤–∞–Ω–æ–≤–∏—á,15.03.1990,–º. –ö–∏—ó–≤,3012345678,–ê–ê123456,–ö–∞–ø—ñ—Ç–∞–Ω,–ü-00001
–ö–æ–≤–∞–ª–µ–Ω–∫–æ,–ü–µ—Ç—Ä–æ,–í–∞—Å–∏–ª—å–æ–≤–∏—á,22.07.1985,–º. –•–∞—Ä–∫—ñ–≤,2987654321,–í–í654321,–ú–∞–π–æ—Ä,–ü-00002
"""