import os
import textwrap

# ==============================================================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê
# –¢—É—Ç –º–∏ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—ñ–≤ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É Django.
# ==============================================================================

PROJECT_NAME = "personnel_accounting"
APPS_DIR = "apps"
APP_NAMES = ["core", "users", "staffing", "personnel", "reporting", "auditing"]

# –°–ª–æ–≤–Ω–∏–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å —à–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —ó—Ö–Ω—ñ–π –≤–º—ñ—Å—Ç
project_files = {
    # --- –§–∞–π–ª–∏ –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –ø–∞–ø—Ü—ñ –ø—Ä–æ—î–∫—Ç—É ---
    "manage.py": """
    #!/usr/bin/env python
    \"\"\"Django's command-line utility for administrative tasks.\"\"\"
    import os
    import sys


    def main():
        \"\"\"Run administrative tasks.\"\"\"
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'personnel_accounting.settings.development')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)


    if __name__ == '__main__':
        main()
    """,
    "requirements.txt": """
    Django>=5.0
    psycopg2-binary
    python-decouple
    django-mptt
    django-crispy-forms
    crispy-tailwind
    django-extensions
    Pillow>=10.0
    """,
    ".gitignore": """
    # Python
    __pycache__/
    *.pyc
    *.pyo
    *.pyd
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    *.egg-info/
    .installed.cfg
    *.egg
    MANIFEST

    # Virtualenv
    .env
    venv/
    env/
    .venv/

    # Docker
    .dockerignore
    docker-compose.yml.local
    .postgres_data/

    # Django
    *.log
    local_settings.py
    db.sqlite3
    db.sqlite3-journal
    media/
    static_root/
    staticfiles/

    # IDE
    .idea/
    .vscode/
    *.swp
    """,
    ".env.example": """
    # Django settings
    SECRET_KEY=your-super-secret-key-goes-here
    DEBUG=True

    # Database settings (for Docker container and local Django)
    DB_NAME=personnel_db
    DB_USER=personnel_user
    DB_PASSWORD=strongpassword
    DB_HOST=127.0.0.1
    DB_PORT=5432
    """,
    "docker-compose.yml": """
    version: '3.8'

    services:
      db:
        image: postgres:17-alpine
        container_name: asoos_postgres_db
        restart: always
        volumes:
          - ./.postgres_data:/var/lib/postgresql/data/
        environment:
          POSTGRES_DB: ${DB_NAME}
          POSTGRES_USER: ${DB_USER}
          POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
          - "${DB_PORT}:5432"
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
          interval: 5s
          timeout: 5s
          retries: 5
    """,
    "Makefile": """
    .PHONY: help up down logs install run migrate makemigrations superuser shell test fresh-start

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .env —Ñ–∞–π–ª –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö
    include .env
    export

    help:
    	@echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç–æ–º –ê–°–û–û–° '–û–ë–†–Ü–ì':"
    	@echo ""
    	@echo "  make up             - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ."
    	@echo "  make down           - –ó—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö."
    	@echo "  make logs           - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ."
    	@echo "  make install        - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Python –∑ requirements.txt."
    	@echo "  make run            - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä —Ä–æ–∑—Ä–æ–±–∫–∏ Django."
    	@echo "  make migrate        - –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."
    	@echo "  make makemigrations - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏ –º—ñ–≥—Ä–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω —É –º–æ–¥–µ–ª—è—Ö."
    	@echo "  make superuser      - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."
    	@echo "  make shell          - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –æ–±–æ–ª–æ–Ω–∫—É Django (shell_plus)."
    	@echo "  make test           - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É."
    	@echo "  make fresh-start    - üî• –ü–û–í–ù–Ü–°–¢–Æ –í–ò–î–ê–õ–ò–¢–ò –ë–ê–ó–£ –î–ê–ù–ò–• —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è."
    	@echo ""

    up:
    	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL..."
    	docker-compose up -d

    down:
    	@echo "üõë –ó—É–ø–∏–Ω—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö..."
    	docker-compose down

    logs:
    	@echo "üìú –ü–µ—Ä–µ–≥–ª—è–¥–∞—é –ª–æ–≥–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    	docker-compose logs -f db

    install:
    	@echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Python..."
    	pip install -r requirements.txt

    run:
    	@echo "üåê –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä —Ä–æ–∑—Ä–æ–±–∫–∏ Django –Ω–∞ http://127.0.0.1:8000/"
    	python manage.py runserver

    migrate:
    	@echo "Applying database migrations..."
    	python manage.py migrate

    makemigrations:
    	@echo "Creating new migrations..."
    	python manage.py makemigrations

    superuser:
    	@echo "Creating superuser..."
    	python manage.py createsuperuser

    shell:
    	@echo "Starting Django shell..."
    	python manage.py shell_plus --print-sql

    test:
    	@echo "Running tests..."
    	python manage.py test

    fresh-start:
    	@echo "üî• –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—é –¥–∞–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    	docker-compose down -v
    	@echo "‚úÖ –î–∞–Ω—ñ –±–∞–∑–∏ –≤–∏–¥–∞–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑ 'make up'."
    """,

    # --- –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π –ø–∞–∫–µ—Ç –ø—Ä–æ—î–∫—Ç—É ---
    f"{PROJECT_NAME}/__init__.py": "",
    f"{PROJECT_NAME}/asgi.py": """
    import os
    from django.core.asgi import get_asgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'personnel_accounting.settings.development')
    application = get_asgi_application()
    """,
    f"{PROJECT_NAME}/wsgi.py": """
    import os
    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'personnel_accounting.settings.development')
    application = get_wsgi_application()
    """,
    f"{PROJECT_NAME}/urls.py": """
    from django.contrib import admin
    from django.urls import path, include
    from django.conf import settings
    from django.conf.urls.static import static

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('apps.personnel.urls')),
        path('staffing/', include('apps.staffing.urls')),
    ]

    if settings.DEBUG:
        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    """,

    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É ---
    f"{PROJECT_NAME}/settings/__init__.py": "",
    f"{PROJECT_NAME}/settings/base.py": """
    from pathlib import Path
    from decouple import config

    BASE_DIR = Path(__file__).resolve().parent.parent.parent

    SECRET_KEY = config('SECRET_KEY')
    DEBUG = config('DEBUG', default=False, cast=bool)

    ALLOWED_HOSTS = []

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        # Third-party apps
        'mptt',
        'crispy_forms',
        'crispy_tailwind',
        'django_extensions',

        # Local apps
        'apps.core.apps.CoreConfig',
        'apps.users.apps.UsersConfig',
        'apps.staffing.apps.StaffingConfig',
        'apps.personnel.apps.PersonnelConfig',
        'apps.reporting.apps.ReportingConfig',
        'apps.auditing.apps.AuditingConfig',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'personnel_accounting.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'personnel_accounting.wsgi.application'

    # Database
    # https://docs.djangoproject.com/en/5.0/ref/settings/#databases
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –±—É–¥–µ –≤ development.py / production.py

    AUTH_USER_MODEL = 'users.User'

    AUTH_PASSWORD_VALIDATORS = [
        {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
        {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
        {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
        {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
    ]

    LANGUAGE_CODE = 'uk-ua'
    TIME_ZONE = 'Europe/Kyiv'
    USE_I18N = True
    USE_TZ = True

    STATIC_URL = 'static/'
    STATICFILES_DIRS = [BASE_DIR / 'static']
    STATIC_ROOT = BASE_DIR / 'staticfiles'

    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
    CRISPY_TEMPLATE_PACK = "tailwind"
    """,
    f"{PROJECT_NAME}/settings/development.py": """
    from .base import *
    from decouple import config

    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST', default='127.0.0.1'),
            'PORT': config('DB_PORT', default='5432'),
        }
    }
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'core' ---
    f"{APPS_DIR}/core/apps.py": """
    from django.apps import AppConfig

    class CoreConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.core'
        verbose_name = '–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏'
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'users' ---
    f"{APPS_DIR}/users/apps.py": """
    from django.apps import AppConfig

    class UsersConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.users'
        verbose_name = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–∞ –ü—Ä–æ—Ñ—ñ–ª—ñ'
    """,
    f"{APPS_DIR}/users/models.py": """
    from django.contrib.auth.models import AbstractUser
    from django.db import models

    class User(AbstractUser):
        middle_name = models.CharField("–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", max_length=150, blank=True)

        def get_full_name(self):
            full_name = '%s %s %s' % (self.last_name, self.first_name, self.middle_name)
            return full_name.strip()

        def __str__(self):
            return self.username
    """,
    f"{APPS_DIR}/users/admin.py": """
    from django.contrib import admin
    from django.contrib.auth.admin import UserAdmin
    from .models import User

    @admin.register(User)
    class CustomUserAdmin(UserAdmin):
        model = User
        fieldsets = UserAdmin.fieldsets + (
            ('–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {'fields': ('middle_name',)}),
        )
        list_display = ['username', 'email', 'first_name', 'last_name', 'is_staff']
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'staffing' ---
    f"{APPS_DIR}/staffing/apps.py": """
    from django.apps import AppConfig

    class StaffingConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.staffing'
        verbose_name = '–®—Ç–∞—Ç–Ω–æ-–ø–æ—Å–∞–¥–æ–≤–∏–π –æ–±–ª—ñ–∫'
    """,
    f"{APPS_DIR}/staffing/models.py": """
    from django.db import models
    from mptt.models import MPTTModel, TreeForeignKey

    class Unit(MPTTModel):
        \"\"\"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª (–≤—ñ–π—Å—å–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞, –±–∞—Ç–∞–ª—å–π–æ–Ω, —Ä–æ—Ç–∞ —Ç–æ—â–æ)\"\"\"
        name = models.CharField("–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É", max_length=255)
        parent = TreeForeignKey(
            'self',
            on_delete=models.CASCADE,
            null=True,
            blank=True,
            related_name='children',
            db_index=True,
            verbose_name="–í–∏—â–∏–π –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª"
        )

        class MPTTMeta:
            order_insertion_by = ['name']

        class Meta:
            verbose_name = "–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª"
            verbose_name_plural = "–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏"

        def __str__(self):
            return self.name

    class MilitarySpecialty(models.Model):
        \"\"\"–í—ñ–π—Å—å–∫–æ–≤–æ-–æ–±–ª—ñ–∫–æ–≤–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (–í–û–°) - –¥–æ–≤—ñ–¥–Ω–∏–∫\"\"\"
        code = models.CharField("–ö–æ–¥ –í–û–°", max_length=20, unique=True)
        name = models.CharField("–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", max_length=255)

        class Meta:
            verbose_name = "–í—ñ–π—Å—å–∫–æ–≤–æ-–æ–±–ª—ñ–∫–æ–≤–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å"
            verbose_name_plural = "–í—ñ–π—Å—å–∫–æ–≤–æ-–æ–±–ª—ñ–∫–æ–≤—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ"

        def __str__(self):
            return f"{self.code} - {self.name}"

    class Position(models.Model):
        \"\"\"–ü–æ—Å–∞–¥–∞ –∑–≥—ñ–¥–Ω–æ –∑—ñ —à—Ç–∞—Ç–æ–º\"\"\"
        unit = models.ForeignKey(Unit, on_delete=models.CASCADE, verbose_name="–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª", related_name="positions")
        position_index = models.CharField("–Ü–Ω–¥–µ–∫—Å –ø–æ—Å–∞–¥–∏", max_length=50, unique=True)
        name = models.CharField("–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Å–∞–¥–∏", max_length=255)
        category = models.CharField("–®—Ç–∞—Ç–Ω–æ-–ø–æ—Å–∞–¥–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", max_length=100)
        specialty = models.ForeignKey(MilitarySpecialty, on_delete=models.PROTECT, verbose_name="–í—ñ–π—Å—å–∫–æ–≤–æ-–æ–±–ª—ñ–∫–æ–≤–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å")
        tariff_rate = models.CharField("–¢–∞—Ä–∏—Ñ–Ω–∏–π —Ä–æ–∑—Ä—è–¥", max_length=50)

        class Meta:
            verbose_name = "–ü–æ—Å–∞–¥–∞"
            verbose_name_plural = "–ü–æ—Å–∞–¥–∏"
            ordering = ['name']

        def __str__(self):
            return f"{self.name} ({self.unit.name})"
    """,
    f"{APPS_DIR}/staffing/admin.py": """
    from django.contrib import admin
    from mptt.admin import DraggableMPTTAdmin
    from .models import Unit, MilitarySpecialty, Position

    @admin.register(Unit)
    class UnitAdmin(DraggableMPTTAdmin):
        list_display = ('tree_actions', 'indented_title')
        list_display_links = ('indented_title',)
        search_fields = ('name',)

    @admin.register(MilitarySpecialty)
    class MilitarySpecialtyAdmin(admin.ModelAdmin):
        list_display = ('code', 'name')
        search_fields = ('code', 'name')

    @admin.register(Position)
    class PositionAdmin(admin.ModelAdmin):
        list_display = ('name', 'unit', 'position_index', 'category', 'specialty')
        list_filter = ('unit', 'specialty', 'category')
        search_fields = ('name', 'position_index', 'unit__name')
        autocomplete_fields = ('unit', 'specialty')
    """,
    f"{APPS_DIR}/staffing/views.py": """
    from django.views.generic import ListView, DetailView
    from .models import Unit

    class UnitListView(ListView):
        model = Unit
        template_name = 'staffing/unit_list.html'
        context_object_name = 'units'

    class UnitDetailView(DetailView):
        model = Unit
        template_name = 'staffing/unit_detail.html'
        context_object_name = 'unit'
    """,
    f"{APPS_DIR}/staffing/urls.py": """
    from django.urls import path
    from .views import UnitListView, UnitDetailView

    app_name = 'staffing'

    urlpatterns = [
        path('', UnitListView.as_view(), name='unit-list'),
        path('<int:pk>/', UnitDetailView.as_view(), name='unit-detail'),
    ]
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'personnel' ---
    f"{APPS_DIR}/personnel/apps.py": """
    from django.apps import AppConfig

    class PersonnelConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.personnel'
        verbose_name = '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –æ–±–ª—ñ–∫'
    """,
    f"{APPS_DIR}/personnel/models.py": """
    from django.db import models
    from django.conf import settings

    class Rank(models.Model):
        \"\"\"–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è - –¥–æ–≤—ñ–¥–Ω–∏–∫\"\"\"
        name = models.CharField("–ù–∞–∑–≤–∞ –∑–≤–∞–Ω–Ω—è", max_length=100, unique=True)
        order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è", default=0)

        class Meta:
            verbose_name = "–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è"
            verbose_name_plural = "–í—ñ–π—Å—å–∫–æ–≤—ñ –∑–≤–∞–Ω–Ω—è"
            ordering = ['order']

        def __str__(self):
            return self.name

    class Serviceman(models.Model):
        \"\"\"–í—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤–µ—Ü—å - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–ª—ñ–∫—É\"\"\"
        user = models.OneToOneField(
            settings.AUTH_USER_MODEL,
            on_delete=models.SET_NULL,
            null=True, blank=True,
            verbose_name="–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å"
        )
        position = models.OneToOneField(
            'staffing.Position',
            on_delete=models.SET_NULL,
            null=True, blank=True,
            verbose_name="–ü–æ—Å–∞–¥–∞"
        )

        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑ –ù–∞–∫–∞–∑–æ–º ‚Ññ 687
        rank = models.ForeignKey(Rank, on_delete=models.PROTECT, verbose_name="–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è")
        last_name = models.CharField("–ü—Ä—ñ–∑–≤–∏—â–µ", max_length=100)
        first_name = models.CharField("–Ü–º'—è", max_length=100)
        middle_name = models.CharField("–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", max_length=100, blank=True)

        date_of_birth = models.DateField("–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
        place_of_birth = models.CharField("–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", max_length=255)
        tax_id_number = models.CharField("–†–ù–û–ö–ü–ü", max_length=10, unique=True, null=True, blank=True)
        passport_number = models.CharField("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞, —â–æ –ø–æ—Å–≤—ñ–¥—á—É—î –æ—Å–æ–±—É", max_length=50)

        photo = models.ImageField("–§–æ—Ç–æ", upload_to='servicemen_photos/', null=True, blank=True)

        class Meta:
            verbose_name = "–í—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤–µ—Ü—å"
            verbose_name_plural = "–í—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ"
            ordering = ['last_name', 'first_name']

        def __str__(self):
            return f"{self.rank} {self.last_name} {self.first_name}"

        @property
        def full_name(self):
            return f"{self.last_name} {self.first_name} {self.middle_name}".strip()

    class Contract(models.Model):
        \"\"\"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è\"\"\"
        serviceman = models.ForeignKey(Serviceman, on_delete=models.CASCADE, related_name='contracts')
        start_date = models.DateField("–î–∞—Ç–∞ —É–∫–ª–∞–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
        end_date = models.DateField("–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
        details = models.TextField("–î–µ—Ç–∞–ª—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É", blank=True)

        class Meta:
            verbose_name = "–ö–æ–Ω—Ç—Ä–∞–∫—Ç"
            verbose_name_plural = "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏"
            ordering = ['-start_date']

    class ServiceHistoryEvent(models.Model):
        \"\"\"–ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ª—É–∂–±–∏\"\"\"
        class EventType(models.TextChoices):
            APPOINTMENT = 'APPOINTMENT', '–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è'
            TRANSFER = 'TRANSFER', '–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è'
            PROMOTION = 'PROMOTION', '–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —É –∑–≤–∞–Ω–Ω—ñ'
            DISMISSAL = 'DISMISSAL', '–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è'

        serviceman = models.ForeignKey(Serviceman, on_delete=models.CASCADE, related_name='service_history')
        event_type = models.CharField("–¢–∏–ø –ø–æ–¥—ñ—ó", max_length=20, choices=EventType.choices)
        event_date = models.DateField("–î–∞—Ç–∞ –ø–æ–¥—ñ—ó")
        details = models.JSONField("–î–µ—Ç–∞–ª—ñ", default=dict, help_text="–ó–±–µ—Ä—ñ–≥–∞—î –¥–µ—Ç–∞–ª—ñ, –Ω–∞–ø—Ä. new_rank, new_position")
        order_reference = models.CharField("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–∫–∞–∑", max_length=255)

        class Meta:
            verbose_name = "–ü–æ–¥—ñ—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ª—É–∂–±–∏"
            verbose_name_plural = "–Ü—Å—Ç–æ—Ä—ñ—è —Å–ª—É–∂–±–∏"
            ordering = ['-event_date']
    """,
    f"{APPS_DIR}/personnel/admin.py": """
    from django.contrib import admin
    from .models import Rank, Serviceman, Contract, ServiceHistoryEvent

    @admin.register(Rank)
    class RankAdmin(admin.ModelAdmin):
        list_display = ('name', 'order')
        list_editable = ('order',)

    class ContractInline(admin.TabularInline):
        model = Contract
        extra = 1

    class ServiceHistoryEventInline(admin.TabularInline):
        model = ServiceHistoryEvent
        extra = 1
        readonly_fields = ('details', 'order_reference', 'event_type', 'event_date')

    @admin.register(Serviceman)
    class ServicemanAdmin(admin.ModelAdmin):
        list_display = ('full_name', 'rank', 'position')
        list_filter = ('rank', 'position__unit')
        search_fields = ('last_name', 'first_name', 'tax_id_number')
        autocomplete_fields = ('position', 'user')
        inlines = [ContractInline, ServiceHistoryEventInline]
        readonly_fields = ('user',)
    """,
    f"{APPS_DIR}/personnel/views.py": """
    from django.views.generic import ListView, DetailView
    from .models import Serviceman

    class ServicemanListView(ListView):
        model = Serviceman
        template_name = 'personnel/serviceman_list.html'
        context_object_name = 'servicemen'
        paginate_by = 20

    class ServicemanDetailView(DetailView):
        model = Serviceman
        template_name = 'personnel/serviceman_detail.html'
        context_object_name = 'serviceman'
    """,
    f"{APPS_DIR}/personnel/urls.py": """
    from django.urls import path
    from .views import ServicemanListView, ServicemanDetailView

    app_name = 'personnel'

    urlpatterns = [
        path('', ServicemanListView.as_view(), name='serviceman-list'),
        path('serviceman/<int:pk>/', ServicemanDetailView.as_view(), name='serviceman-detail'),
    ]
    """,
    f"{APPS_DIR}/personnel/services.py": """
    from django.db import transaction
    from .models import Serviceman, ServiceHistoryEvent
    from apps.staffing.models import Position
    from datetime import date

    @transaction.atomic
    def transfer_serviceman(serviceman: Serviceman, new_position: Position, order_reference: str, event_date: date):
        \"\"\"
        –í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è –Ω–∞ –Ω–æ–≤—É –ø–æ—Å–∞–¥—É.
        –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —î –ø—Ä–∏–∫–ª–∞–¥–æ–º —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ –≤ —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —à–∞—Ä—ñ.
        \"\"\"
        old_position = serviceman.position

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–æ–≤–∞ –ø–æ—Å–∞–¥–∞ –Ω–µ –∑–∞–π–Ω—è—Ç–∞
        if hasattr(new_position, 'serviceman') and new_position.serviceman is not None:
             raise ValueError(f"–ü–æ—Å–∞–¥–∞ {new_position} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞.")

        # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤—É –ø–æ—Å–∞–¥—É
        serviceman.position = new_position
        serviceman.save()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ª—É–∂–±–∏
        ServiceHistoryEvent.objects.create(
            serviceman=serviceman,
            event_type=ServiceHistoryEvent.EventType.TRANSFER,
            event_date=event_date,
            details={
                'from_position_id': old_position.id if old_position else None,
                'from_position_name': str(old_position) if old_position else 'N/A',
                'to_position_id': new_position.id,
                'to_position_name': str(new_position),
            },
            order_reference=order_reference
        )

        # –¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞, –Ω–∞–ø—Ä. –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
        print(f"–í—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è {serviceman} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø–æ—Å–∞–¥—É {new_position}.")

        return serviceman
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'reporting' ---
    f"{APPS_DIR}/reporting/apps.py": """
    from django.apps import AppConfig

    class ReportingConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.reporting'
        verbose_name = '–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å —Ç–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    """,

    # --- –î–æ–¥–∞—Ç–æ–∫ 'auditing' ---
    f"{APPS_DIR}/auditing/apps.py": """
    from django.apps import AppConfig

    class AuditingConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'apps.auditing'
        verbose_name = '–ê—É–¥–∏—Ç —Ç–∞ –ñ—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è'
    """,

    # --- –®–∞–±–ª–æ–Ω–∏ (Templates) ---
    "templates/base.html": """
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}–ê–°–û–û–° '–û–ë–†–Ü–ì'{% endblock %}</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 font-sans">
        <nav class="bg-gray-800 text-white p-4 shadow-md">
            <div class="container mx-auto flex justify-between items-center">
                <a href="{% url 'personnel:serviceman-list' %}" class="text-xl font-bold">–ê–°–û–û–° '–û–ë–†–Ü–ì'</a>
                <div>
                    <a href="{% url 'personnel:serviceman-list' %}" class="px-3 py-2 rounded hover:bg-gray-700">–û—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥</a>
                    <a href="{% url 'staffing:unit-list' %}" class="px-3 py-2 rounded hover:bg-gray-700">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏</a>
                    <a href="/admin/" class="px-3 py-2 rounded hover:bg-gray-700">–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</a>
                </div>
            </div>
        </nav>

        <main class="container mx-auto mt-8 p-4">
            {% block content %}
            {% endblock %}
        </main>

        <footer class="bg-gray-800 text-white text-center p-4 mt-8">
            <p>&copy; 2025 –ú—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ –û–±–æ—Ä–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
        </footer>
    </body>
    </html>
    """,
    "templates/personnel/serviceman_list.html": """
    {% extends "base.html" %}

    {% block title %}–°–ø–∏—Å–æ–∫ –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É - –ê–°–û–û–° '–û–ë–†–Ü–ì'{% endblock %}

    {% block content %}
    <div class="bg-white p-6 rounded-lg shadow-lg">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">–°–ø–∏—Å–æ–∫ –æ—Å–æ–±–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É</h1>

        <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
                <thead class="bg-gray-800 text-white">
                    <tr>
                        <th class="py-3 px-4 uppercase font-semibold text-sm text-left">–ü–Ü–ë</th>
                        <th class="py-3 px-4 uppercase font-semibold text-sm text-left">–ó–≤–∞–Ω–Ω—è</th>
                        <th class="py-3 px-4 uppercase font-semibold text-sm text-left">–ü–æ—Å–∞–¥–∞</th>
                        <th class="py-3 px-4 uppercase font-semibold text-sm text-left">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</th>
                    </tr>
                </thead>
                <tbody class="text-gray-700">
                    {% for serviceman in servicemen %}
                    <tr class="hover:bg-gray-100 border-b">
                        <td class="py-3 px-4">
                            <a href="{% url 'personnel:serviceman-detail' serviceman.pk %}" class="text-blue-600 hover:underline">
                                {{ serviceman.full_name }}
                            </a>
                        </td>
                        <td class="py-3 px-4">{{ serviceman.rank }}</td>
                        <td class="py-3 px-4">{{ serviceman.position.name|default:"–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ" }}</td>
                        <td class="py-3 px-4">{{ serviceman.position.unit.name|default:"N/A" }}</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="4" class="text-center py-4">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% endblock %}
    """,
    "templates/personnel/serviceman_detail.html": """
    {% extends "base.html" %}

    {% block title %}{{ serviceman.full_name }} - –ê–°–û–û–° '–û–ë–†–Ü–ì'{% endblock %}

    {% block content %}
    <div class="bg-white p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
        <div class="flex items-center space-x-6 mb-6">
            <div class="w-32 h-32 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden">
                {% if serviceman.photo %}
                    <img src="{{ serviceman.photo.url }}" alt="–§–æ—Ç–æ" class="w-full h-full object-cover">
                {% else %}
                    <span class="text-gray-500">–§–æ—Ç–æ</span>
                {% endif %}
            </div>
            <div>
                <h1 class="text-4xl font-bold text-gray-800">{{ serviceman.full_name }}</h1>
                <p class="text-2xl text-gray-600">{{ serviceman.rank }}</p>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-gray-50 p-4 rounded-md">
                <h2 class="text-xl font-semibold mb-2 text-gray-700">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>
                <p><strong>–ü–æ—Å–∞–¥–∞:</strong> {{ serviceman.position.name|default:"–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ" }}</p>
                <p><strong>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</strong> {{ serviceman.position.unit.name|default:"N/A" }}</p>
                <p><strong>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</strong> {{ serviceman.date_of_birth|date:"d.m.Y" }}</p>
                <p><strong>–ú—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</strong> {{ serviceman.place_of_birth }}</p>
            </div>
            <div class="bg-gray-50 p-4 rounded-md">
                <h2 class="text-xl font-semibold mb-2 text-gray-700">–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ</h2>
                <p><strong>–†–ù–û–ö–ü–ü:</strong> {{ serviceman.tax_id_number|default:"–ù–µ –≤–∫–∞–∑–∞–Ω–æ" }}</p>
                <p><strong>–ü–∞—Å–ø–æ—Ä—Ç:</strong> {{ serviceman.passport_number|default:"–ù–µ –≤–∫–∞–∑–∞–Ω–æ" }}</p>
            </div>
        </div>

        <div class="mt-8">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">–Ü—Å—Ç–æ—Ä—ñ—è —Å–ª—É–∂–±–∏</h2>
            <ul class="space-y-2">
                {% for event in serviceman.service_history.all %}
                <li class="bg-gray-100 p-3 rounded-md">
                    <p class="font-semibold">{{ event.get_event_type_display }} - {{ event.event_date|date:"d.m.Y" }}</p>
                    <p class="text-sm text-gray-600">–ù–∞–∫–∞–∑: {{ event.order_reference }}</p>
                </li>
                {% empty %}
                <p>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ª—É–∂–±–∏.</p>
                {% endfor %}
            </ul>
        </div>
    </div>
    {% endblock %}
    """,
    "templates/staffing/unit_list.html": """
    {% extends "base.html" %}
    {% load mptt_tags %}

    {% block title %}–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ - –ê–°–û–û–° '–û–ë–†–Ü–ì'{% endblock %}

    {% block content %}
    <div class="bg-white p-6 rounded-lg shadow-lg">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤</h1>

        <ul class="list-none p-0">
            {% recursetree units %}
                <li class="p-2 rounded {% if not node.is_leaf_node %}mb-2{% endif %}">
                    <a href="{% url 'staffing:unit-detail' node.pk %}" class="text-blue-600 hover:underline font-semibold">
                        {{ node.name }}
                    </a>
                    {% if not node.is_leaf_node %}
                        <ul class="list-none pl-6 mt-2 border-l-2 border-gray-200">
                            {{ children }}
                        </ul>
                    {% endif %}
                </li>
            {% endrecursetree %}
        </ul>
    </div>
    {% endblock %}
    """,
    "templates/staffing/unit_detail.html": """
    {% extends "base.html" %}

    {% block title %}{{ unit.name }} - –ê–°–û–û–° '–û–ë–†–Ü–ì'{% endblock %}

    {% block content %}
    <div class="bg-white p-8 rounded-lg shadow-lg">
        <h1 class="text-3xl font-bold mb-2 text-gray-800">{{ unit.name }}</h1>
        {% if unit.parent %}
        <p class="text-lg text-gray-600 mb-6">–í—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É: <a href="{% url 'staffing:unit-detail' unit.parent.pk %}" class="text-blue-600 hover:underline">{{ unit.parent.name }}</a></p>
        {% endif %}

        <div class="mt-8">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">–®—Ç–∞—Ç–Ω—ñ –ø–æ—Å–∞–¥–∏</h2>
            <div class="space-y-2">
                {% for position in unit.positions.all %}
                    <div class="bg-gray-50 p-3 rounded-md">
                        <p class="font-semibold">{{ position.name }}</p>
                        <p class="text-sm text-gray-600">–Ü–Ω–¥–µ–∫—Å: {{ position.position_index }} | –í–û–°: {{ position.specialty.code }}</p>
                    </div>
                {% empty %}
                    <p>–£ —Ü—å–æ–º—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ –Ω–µ–º–∞—î —à—Ç–∞—Ç–Ω–∏—Ö –ø–æ—Å–∞–¥.</p>
                {% endfor %}
            </div>
        </div>
    </div>
    {% endblock %}
    """,
}


# ==============================================================================
# –õ–û–ì–Ü–ö–ê –ì–ï–ù–ï–†–ê–¢–û–†–ê
# –¶–µ–π –∫–æ–¥ —Å—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫–∏ —Ç–∞ —Ñ–∞–π–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤–∏—â–µ.
# ==============================================================================

def create_project_structure():
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Ç–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ—î–∫—Ç—É."""
    print("üöÄ –ü–æ—á–∏–Ω–∞—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É –ê–°–û–û–° '–û–ë–†–Ü–ì'...")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–µ–Ω–µ–≤–∏—Ö –ø–∞–ø–æ–∫
    base_dirs = [PROJECT_NAME, APPS_DIR, "templates", "static", "media"]
    for directory in base_dirs:
        os.makedirs(directory, exist_ok=True)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫ –¥–ª—è –¥–æ–¥–∞—Ç–∫—ñ–≤ —Ç–∞ –±–∞–∑–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    for app_name in APP_NAMES:
        app_path = os.path.join(APPS_DIR, app_name)
        os.makedirs(app_path, exist_ok=True)
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç—ñ —Ñ–∞–π–ª–∏ __init__.py, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ
        if not os.path.exists(os.path.join(app_path, "__init__.py")):
            open(os.path.join(app_path, "__init__.py"), 'a').close()
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç—ñ —Ñ–∞–π–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è, –∞–ª–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
        for empty_file in ["models.py", "admin.py", "views.py", "urls.py", "services.py"]:
            full_path = os.path.join(app_path, empty_file)
            if full_path not in project_files and not os.path.exists(full_path):
                open(full_path, 'a').close()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑ —ó—Ö–Ω—ñ–º –≤–º—ñ—Å—Ç–æ–º
    for file_path, content in project_files.items():
        dir_path = os.path.dirname(file_path)
        if dir_path:
            os.makedirs(dir_path, exist_ok=True)

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(textwrap.dedent(content).strip())
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {file_path}")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞–ø–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
    os.makedirs("templates/personnel", exist_ok=True)
    os.makedirs("templates/staffing", exist_ok=True)

    print("\nüéâ –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—î–∫—Ç—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    print("=" * 60)
    print("‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ü–û–†–Ø–î–û–ö –ó–ê–ü–£–°–ö–£ (–∑ Docker —Ç–∞ Make):")
    print("\n0.  –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —É –≤–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Docker —Ç–∞ Docker Compose.")
    print("    –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞–ª–∏ –ø–æ–º–∏–ª–∫–∏, –ø–æ—á–Ω—ñ—Ç—å –∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞: make fresh-start")
    print("\n1.  –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤—É–π—Ç–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ Python:")
    print("    python -m venv venv")
    print("    source venv/bin/activate  # –¥–ª—è Linux/macOS")
    print("    .\\venv\\Scripts\\activate    # –¥–ª—è Windows")
    print("\n2.  –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ–∞–π–ª .env:")
    print("    - –°–∫–æ–ø—ñ—é–π—Ç–µ .env.example –≤ .env.")
    print("    - –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env, –≤–∫–∞–∑–∞–≤—à–∏ –Ω–∞–¥—ñ–π–Ω–∏–π SECRET_KEY.")
    print("\n3.  –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤ Docker:")
    print("    make up")
    print("\n4.  –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Python:")
    print("    make install")
    print("\n5.  ‚ÄºÔ∏è –í–ê–ñ–õ–ò–í–û: –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –º—ñ–≥—Ä–∞—Ü—ñ–π:")
    print("    make makemigrations")
    print("\n6.  –¢–µ–ø–µ—Ä –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ –º—ñ–≥—Ä–∞—Ü—ñ—ó —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    print("    make migrate")
    print("    make superuser")
    print("\n7.  –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä Django:")
    print("    make run")
    print("\n8.  –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø—Ä–æ—î–∫—Ç —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ:")
    print("    - –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: http://127.0.0.1:8000/")
    print("    - –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å: http://127.0.0.1:8000/admin/")
    print("\nüí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥, –≤–∏–∫–æ–Ω–∞–π—Ç–µ: make help")
    print("=" * 60)


if __name__ == "__main__":
    create_project_structure()
